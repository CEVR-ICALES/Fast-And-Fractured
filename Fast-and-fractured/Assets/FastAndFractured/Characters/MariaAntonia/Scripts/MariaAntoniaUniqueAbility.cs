using FMODUnity;
using Utilities;
using UnityEngine;
using System.Collections.Generic;

namespace FastAndFractured
{
    public class MariaAntoniaUniqueAbility : BaseUniqueAbility
    {
        #region Variables
        [SerializeField] private StatsController _statsController;

        [Tooltip("Multiplier to reduce the cooldown timers (example: 1.5 increases the cooldown timer by 50%")]
        public float cooldownReductionMultiplier;

        [Tooltip("Multiplier to increase the stats (example: 1.2 increases the stats by 20%")]
        public float statBoostMultiplier;

        [Tooltip("Unique ability duration in seconds")]
        public float uniqueAbilityDuration;

        [Tooltip("Croquette Model")]
        public GameObject croquetasGameObject;

        [Tooltip("Number of croquettes generated by the special ability")]
        public int numberOfCroquettes;

        private float _orbitRadius;

        private float _orbitSpeed;

        private List<GameObject> croquetteList = new List<GameObject>();

        public EventReference ssjUltiReference;

        #endregion

        private void Update()
        {
            RotateCroquettes();
        }

        public override void ActivateAbility()
        {
            if (IsAbilityActive || IsOnCooldown)
                return;

            base.ActivateAbility();

            SoundManager.Instance.PlayOneShot(ssjUltiReference, transform.position);

            if (_statsController == null)
            {
                Debug.Log("Stats Controller not Found");
                return;
            }

            _statsController.TemporalProductStat(Enums.Stats.COOLDOWN_SPEED, cooldownReductionMultiplier, uniqueAbilityDuration);

            _statsController.TemporalProductStat(Enums.Stats.MAX_SPEED, statBoostMultiplier, uniqueAbilityDuration);
            _statsController.TemporalProductStat(Enums.Stats.ACCELERATION, statBoostMultiplier, uniqueAbilityDuration);
            _statsController.TemporalProductStat(Enums.Stats.NORMAL_DAMAGE, statBoostMultiplier, uniqueAbilityDuration);
            _statsController.TemporalProductStat(Enums.Stats.PUSH_DAMAGE, statBoostMultiplier, uniqueAbilityDuration);

            GenerateCroquettes(numberOfCroquettes);
        }

        #region Croquettes Methods
        /// <summary>
        /// Method that generates the number of croquettes specified
        /// </summary>
        /// <param name="count">Number of croquettes to instantiate</param>
        private void GenerateCroquettes(int count)
        {
            ClearCroquettes();

            for (int i = 0; i < count; i++)
            {
                float angle = i * (360f / count);
                Vector3 position = transform.position + Quaternion.Euler(0, angle, 0) * (Vector3.forward * _orbitRadius);
                GameObject croquette = Instantiate(croquetasGameObject, position, Quaternion.identity, transform);
                croquetteList.Add(croquette);
            }
        }

        /// <summary>
        /// Method that makes the generated croquettes spin around the player
        /// </summary>
        private void RotateCroquettes()
        {
            for (int i = 0; i < croquetteList.Count; i++)
            {
                float angle = (Time.time * _orbitSpeed) + (i * (360f / croquetteList.Count));
                Vector3 position = transform.position + Quaternion.Euler(0, angle, 0) * (Vector3.forward * _orbitRadius);
                croquetteList[i].transform.position = position;
            }
        }

        /// <summary>
        /// Method that manages the consumption of the croquettes when a hit occurs
        /// </summary>
        public void ConsumeCroquettes()
        {
            foreach (var croquette in croquetteList)
            {
                Destroy(croquette);
            }
            croquetteList.Clear();
        }

        /// <summary>
        /// Method that clears all the croquettes
        /// </summary>
        private void ClearCroquettes()
        {
            if (croquetteList.Count > 0)
            {
                GameObject croquette  = croquetteList[0];
                croquetteList.RemoveAt(0);
                Destroy(croquette);
            }
        }
        #endregion
    }
}